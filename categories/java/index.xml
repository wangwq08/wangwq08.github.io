<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Jachin - Stay foolish and stay hungry</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on Jachin - Stay foolish and stay hungry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Jul 2019 17:12:07 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础知识(六)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%AD/</link>
      <pubDate>Mon, 22 Jul 2019 17:12:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%AD/</guid>
      <description>构造方法 静态方法 参考资料</description>
    </item>
    
    <item>
      <title>Java基础知识(五)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94/</link>
      <pubDate>Mon, 22 Jul 2019 08:34:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%94/</guid>
      <description>为什么Java中只有值传递？ 按值调用（call by value）表示方法接收的是调用者提供的值，而按引用调用（call by reference）表示</description>
    </item>
    
    <item>
      <title>Java基础知识(四)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9B/</link>
      <pubDate>Fri, 19 Jul 2019 14:30:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9B/</guid>
      <description>hashCode 与 equals（重要） 重写过hashcode和equals吗？为什么重写equals时必须重写hashCode方法 hashCode() 介绍 hashCode的</description>
    </item>
    
    <item>
      <title>Java基础知识(三)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%89/</link>
      <pubDate>Fri, 19 Jul 2019 09:37:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%89/</guid>
      <description>1、接口和抽象类的区别是什么？ 接口的方法默认是public，所有方法在接口中不能有实现（Java8开始接口方法可以有默认实现）。而抽象类可以</description>
    </item>
    
    <item>
      <title>Java基础知识(二)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C/</link>
      <pubDate>Thu, 18 Jul 2019 11:48:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C/</guid>
      <description>1、构造器Constructor是否可以被override? 父类的私有属性和构造方法并不能被继承。所以Constructor也就不能被ove</description>
    </item>
    
    <item>
      <title>Java基础知识(一)</title>
      <link>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 15 Jul 2019 17:59:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>1 面向对象和面向过程的区别 面向过程 ：面向过程性能比面向对象高。因为类调用时需要实例化,开销比较大，比较消耗资源。所以当性能是最重要的考量因素</description>
    </item>
    
  </channel>
</rss>